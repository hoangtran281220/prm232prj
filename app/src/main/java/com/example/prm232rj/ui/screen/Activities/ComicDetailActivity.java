package com.example.prm232rj.ui.screen.Activities;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.example.prm232rj.data.model.Comic;
import com.example.prm232rj.data.model.RatingResult;
import com.example.prm232rj.data.room.ReadHistoryEntity;
import com.example.prm232rj.databinding.ActivityComicDetailBinding;
import com.example.prm232rj.ui.adapter.ChapterAdapter;
import com.example.prm232rj.ui.viewmodel.ComicDetailViewModel;
import com.example.prm232rj.ui.viewmodel.FollowedComicsViewModel;
import com.example.prm232rj.ui.viewmodel.ReadHistoryViewModel;

import java.util.ArrayList;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class ComicDetailActivity extends AppCompatActivity {
    private ActivityComicDetailBinding binding;
    private ComicDetailViewModel viewModel;
    private String comicId;
    private ChapterAdapter chapterAdapter;
    private FollowedComicsViewModel followViewModel;
    private boolean isFollowed = false;

    private ReadHistoryViewModel historyViewModel;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityComicDetailBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        // Kh·ªüi t·∫°o ViewModel
        viewModel = new ViewModelProvider(this).get(ComicDetailViewModel.class);
        historyViewModel = new ViewModelProvider(this).get(ReadHistoryViewModel.class);
        // L·∫•y comicId t·ª´ Intent
        comicId = getIntent().getStringExtra("COMIC_ID");

        if (comicId == null || comicId.trim().isEmpty()) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y th√¥ng tin truy·ªán", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }
        followViewModel = new ViewModelProvider(this).get(FollowedComicsViewModel.class);

        // G·ªçi quan s√°t truy·ªán ƒë√£ theo d√µi hay ch∆∞a
        SharedPreferences prefs = getSharedPreferences("USER_PREF", MODE_PRIVATE);
        String uid = prefs.getString("uid", null);
        if (uid != null) {
            followViewModel.observeFollowedComics(uid);
        }
        // Setup observers
        setupObservers();

        // Setup UI events
        setupUI();
        chapterAdapter = new ChapterAdapter(new ArrayList<>(), chapter -> {
            // X·ª≠ l√Ω khi nh·∫•n v√†o chapter
            Intent intent = new Intent(ComicDetailActivity.this, ChapterActivity.class);
            intent.putExtra("COMIC_ID", comicId);
            intent.putExtra("CHAPTER_ID", chapter.getId());
            ReadHistoryEntity entity = new ReadHistoryEntity();
            entity.comicId = comicId;
            entity.comicTitle = binding.getComic().getTitle();
            entity.comicCoverUrl = binding.getComic().getCoverImage();
            entity.chapterReading = chapter.getChapterNumber();
            entity.lastReadAt = System.currentTimeMillis();
            entity.chapterId = chapter.getId();
            historyViewModel.saveHistory(entity);
            startActivity(intent);
        });
        binding.recyclerChapters.setAdapter(chapterAdapter); // ‚Üê G√°n adapter ·ªü ƒë√¢y
        binding.recyclerChapters.setLayoutManager(new LinearLayoutManager(this));
        // Load d·ªØ li·ªáu
        viewModel.loadComic(comicId);
        viewModel.loadChapters(comicId);
    }

    private void setupObservers() {
        followViewModel.getFollowedComics().observe(this, followedList -> {
            if (followedList != null && !followedList.isEmpty()) {
                boolean isFollowed = false;
                for (var comic : followedList) {
                    if (comic.getId().equals(comicId)) {
                        isFollowed = true;
                        break;
                    }
                }
                updateFavoriteUI(isFollowed);
            } else {
                updateFavoriteUI(false);
            }
        });

        followViewModel.getFollowSuccess().observe(this, success -> {
            if (success != null && success) {
                Toast.makeText(this, "ƒê√£ th√™m v√†o danh s√°ch theo d√µi!", Toast.LENGTH_SHORT).show();
            }
        });
        followViewModel.getUnfollowSuccess().observe(this, success -> {
            if (success != null && success) {
                Toast.makeText(this, "ƒê√£ xo√° kh·ªèi danh s√°ch theo d√µi!", Toast.LENGTH_SHORT).show();
            }
        });

        // Observe comic data
        viewModel.getComic().observe(this, comic -> {
            if (comic != null) {
                binding.setComic(comic);
                binding.executePendingBindings(); // ƒê·∫£m b·∫£o binding ƒë∆∞·ª£c th·ª±c thi ngay l·∫≠p t·ª©c

                // G·ªçi fetch t√°c gi·∫£ & th·ªÉ lo·∫°i ·ªü ƒë√¢y
                viewModel.fetchAuthorAndTags(comic);
            }
        });

        // Observe loading state
        viewModel.getIsLoading().observe(this, isLoading -> {
            if (binding.progressBar != null) {
                binding.progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);
            }

            // C√≥ th·ªÉ th√™m logic disable/enable UI khi loading
            binding.getRoot().setEnabled(!isLoading);
        });

        // Observe error
        viewModel.getError().observe(this, error -> {
            if (error != null && !error.trim().isEmpty()) {
                Toast.makeText(this, error, Toast.LENGTH_LONG).show();

                // C√≥ th·ªÉ th√™m logic hi·ªÉn th·ªã error state UI
                // ho·∫∑c finish activity n·∫øu l·ªói nghi√™m tr·ªçng
            }
        });

        viewModel.getChapters().observe(this, chapters -> {
            if (chapters != null) {
                chapterAdapter.updateChapters(chapters); // C·∫≠p nh·∫≠t d·ªØ li·ªáu cho adapter hi·ªán t·∫°i
                binding.tvChapterCount.setText(chapters.size() + " ch∆∞∆°ng"); // C·∫≠p nh·∫≠t s·ªë ch∆∞∆°ng

            }
        });
        //load t√°c gi·∫£
        viewModel.getAuthorNames().observe(this, authors -> {
            binding.textAuthors.setText(authors);
        });
        //load tag
        viewModel.getTagNames().observe(this, tags -> {
            binding.textTags.setText(tags);
        });


    }

    private void setupUI() {
        // Setup toolbar n·∫øu c√≥
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setTitle("Chi ti·∫øt truy·ªán");
        }

        // C√≥ th·ªÉ th√™m c√°c s·ª± ki·ªán UI kh√°c nh∆∞:
        // - Button ƒë·ªçc truy·ªán
        // - Button y√™u th√≠ch
        binding.btnFavorite.setOnClickListener(v -> {
            SharedPreferences prefs = getSharedPreferences("USER_PREF", MODE_PRIVATE);
            String uid = prefs.getString("uid", null);

            if (uid == null) {
                showLoginRequiredDialog(); // ‚Üê N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
            } else {
                // TODO: X·ª≠ l√Ω th√™m/tr·ª´ truy·ªán v√†o danh s√°ch follow
                if (isFollowed) {
                    followViewModel.unfollowComic(uid, comicId);
                } else {
                    followViewModel.followComic(uid, comicId);
                }            }
        });

        //Button ƒë√°nh gi√°
        binding.btnRate.setOnClickListener(v -> {
            SharedPreferences prefs = getSharedPreferences("USER_PREF", MODE_PRIVATE);
            String uid = prefs.getString("uid", null);

            if (uid == null) {
                showLoginRequiredDialog(); // ‚õî N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
            } else {
                showRatingDialog(comicId, uid); // ‚úÖ Hi·ªÉn th·ªã dialog ƒë√°nh gi√°
            }
        });
        // - Swipe to refresh
        // - etc.
    }

    private void showRatingDialog(String comicId, String userId) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("ƒê√°nh gi√° truy·ªán");

        // T·∫°o RatingBar v·ªõi step l·∫ª
        RatingBar ratingBar = new RatingBar(this);
        ratingBar.setNumStars(5);
        ratingBar.setStepSize(0.1f); // ‚úÖ Cho ph√©p ƒë√°nh gi√° l·∫ª nh∆∞ 3.4, 4.7
        ratingBar.setRating(3.5f);

        LinearLayout layout = new LinearLayout(this);
        layout.setPadding(40, 30, 40, 10);
        layout.setGravity(Gravity.CENTER);
        layout.addView(ratingBar);

        builder.setView(layout);

        builder.setPositiveButton("G·ª≠i", (dialog, which) -> {
            double rating = ratingBar.getRating();

            // G·ªçi ViewModel/Repo ƒë·ªÉ x·ª≠ l√Ω rating
            viewModel.rateComic(comicId, userId, rating, task -> {
                if (task.isSuccessful()) {
                    RatingResult result = task.getResult();
                    double newAvg = result.getAverage();
                    long newCount = result.getCount();
                    Toast.makeText(this, "C·∫£m ∆°n b·∫°n! Rating m·ªõi: " + newAvg, Toast.LENGTH_SHORT).show();

                    // üëâ C·∫≠p nh·∫≠t l·∫°i UI n·∫øu c·∫ßn
                    Comic comic = binding.getComic();
                    if (comic != null) {
                        comic.setRating(newAvg);
                        comic.setRatingCount(newCount);
                        binding.setComic(comic);
                        binding.executePendingBindings();
                    }
                    SharedPreferences prefs = getSharedPreferences("APP_PREF", MODE_PRIVATE);
                    prefs.edit().putBoolean("should_refresh_home", true).apply();

                } else {
                    Toast.makeText(this, "ƒê√°nh gi√° th·∫•t b·∫°i: " + task.getException().getMessage(), Toast.LENGTH_SHORT).show();
                }
            });
        });

        builder.setNegativeButton("Hu·ª∑", null);
        builder.show();
    }

    private void updateFavoriteUI(boolean followed) {
        isFollowed = followed;
        if (followed) {
            binding.btnFavorite.setText("ƒê√£ y√™u th√≠ch ‚ù§Ô∏è");
        } else {
            binding.btnFavorite.setText("Y√™u th√≠ch");
        }
    }

    @Override
    public boolean onSupportNavigateUp() {
        onBackPressed();
        return true;
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        binding = null;
    }
    private void showLoginRequiredDialog() {
        new AlertDialog.Builder(this)
                .setTitle("Y√™u c·∫ßu ƒëƒÉng nh·∫≠p")
                .setMessage("T√≠nh nƒÉng n√†y y√™u c·∫ßu ƒëƒÉng nh·∫≠p.")
                .setPositiveButton("OK", (dialog, which) -> dialog.dismiss())
                .show();
    }

}